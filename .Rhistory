devtools::install_github("robjhyndman/forecast")
install.packages('devtools')
library(devtools)
devtools::install_github("robjhyndman/forecast")
devtools::install_github("robjhyndman/forecast")
??arima
data("AirPassengers")
data <- window(AirPassengers, start = start, c(start, end))
timeSeries <- read.csv("./data/outputs/Myanmar_TownshipForestLossFragmentation.csv")
View(timeSeries)
?window
View(timeSeries)
timeSeries$Year[1]
max(((timeSeries$Year[2] - start)), 5) * 12
start <- timeSeries$Year[1]
max(((timeSeries$Year[2] - start)), 5) * 12
timeSeries$Year[2]
max(timeSeries$Year)
end <- max(timeSeries$Year)
period <- as.integer(1)
data <- window(timeSeries, start = start, c(start, end))
start <- timeSeries$Year[1] # year 1 = 2001
end <- max(timeSeries$Year)
data <- window(timeSeries, start = start, c(start, end))
data <- window(x = timeSeries, start = start, end = end))
data <- window(x = timeSeries, start = start, end = end)
data <- window(x = timeSeries, start = start, end = end, c(start, end))
modelFit <- arima(timeSeries, order = c(1, 0, 0), list(order = c(2,1, 0), period = 12))
data <- window(x = timeSeries, start = start, end = end)
# end <- max(timeSeries$Year)
end <- max(((timeSeries$Year[2] - start)), 5) * 12
data <- window(x = timeSeries, start = start, end = end, c(start, end))
data <- window(x = timeSeries, start = start, c(start, end))
end
# end <- max(timeSeries$Year)
end <- max(((max(timeSeries$Year) - start)), 5) * 12
end
end <-   max(((1958 - start)), 5) * 12
end
end <-   max(((1970 - start)), 5) * 12
end
end <-   max(((1951 - start)), 5) * 12
end
?max
min(5:1, pi
)
min(5:1, pi)
pmin(5:1, pi)
# end <- max(timeSeries$Year)
end <- max(((max(timeSeries$Year) - start)), 5) * 12
data <- window(x = timeSeries, start = start, c(start, end))
data <- window(x = timeSeries, start = start, c(start, 60))
data <- window(x = timeSeries, start = 2001, c(2001, 2017))
?window
presidents
class(presidents)
timeSeries <- as.ts(timeSeries)
data <- window(x = timeSeries, start = 2001, c(2001, 2017))
View(timeSeries)
?asts
?as.ts
country_loss <- read.csv("./data/outputs/Myanmar_TownshipForestLossFragmentation.csv")
View(country_loss)
unique(country_loss$Township)
# Create a list of township names
towns <- list(unique(country_loss$Township))
# Create a list of township names
towns <- unique(country_loss$Township)
class(towns)
# Create a list of township names
towns <- list(unique(country_loss$Township))
towns
towns[[2]]
towns[2]
# Create a list of township names
towns <- unique(country_loss$Township)
towns[[2]]
towns[[456]]
towns[200]
length(towns)
length(unique(country_loss$Township))
?append()
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- as.list()
for (i in 1:length(towns)) {
out <- country_loss %>%
filter(Township = town_names[[i]])
towns[[i]] <- out
}
library(tidyverse)
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- as.list()
for (i in 1:length(towns)) {
out <- country_loss %>%
filter(Township = town_names[[i]])
towns[[i]] <- out
}
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(towns)) {
out <- country_loss %>%
filter(Township = town_names[[i]])
towns[[i]] <- out
}
for (i in 1:length(towns)) {
out <- country_loss %>%
filter(Township == town_names[[i]])
towns[[i]] <- out
}
town_names[[3]]
class(town_names[[3]])
for (i in 1:length(towns)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]]))
towns[[i]] <- out
}
towns
towns[[2]]
towns[[1]]
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(town_names)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]]))
towns[[i]] <- out
}
towns
towns[[3]]
?as.ts
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(town_names)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]]))
towns[[i]] <- as.ts(out)
}
towns[[3]]
town_names[[3]]
data <- window(x = towns[[1]], start = 2001, c(2001, 2017))
towns[[1]]
modelFit <- arima(towns[[1]], order = c(1, 0, 0), list(order = c(2,1, 0), period = 12))
?arima
modelFit <- arima(towns[[1]], order = c(1, 0, 0),
seasonal = list(order = c(2, 1, 0), period = NA))
class(towns[[1]])
data <- towns[[1]]
class(towns[[1]])
class(data)
modelFit <- arima(data, order = c(1, 0, 0),
seasonal = list(order = c(2, 1, 0), period = NA))
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(town_names)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]]))
towns[[i]] <- ts(out)
}
class(towns[[1]])
data <- towns[[1]]
modelFit <- arima(data, order = c(1, 0, 0),
seasonal = list(order = c(2, 1, 0), period = NA))
country_loss <- read.csv("./data/outputs/Myanmar_TownshipForestLossFragmentation.csv")
# Select down to just total area of patches lost
country_loss <- country_loss %>%
select(Township, Year, Total.Area.of.Loss.Patches)
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(town_names)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]]))
towns[[i]] <- ts(out)
}
towns[[1]]
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(town_names)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]])) %>%
select(Year, Total.Area.of.Loss.Patches)
towns[[i]] <- ts(out)
}
towns[[1]]
data <- towns[[1]]
modelFit <- arima(data, order = c(1, 0, 0),
seasonal = list(order = c(2, 1, 0), period = NA))
data
class(data)
# Create a list of township names
town_names <- unique(country_loss$Township)
# Create a list of datasets, one for each town
towns <- list()
for (i in 1:length(town_names)) {
out <- country_loss %>%
filter(Township == as.character(town_names[[i]])) %>%
select(Total.Area.of.Loss.Patches)
towns[[i]] <- ts(out)
}
data <- towns[[1]]
class(data)
modelFit <- arima(data, order = c(1, 0, 0),
seasonal = list(order = c(2, 1, 0), period = NA))
towns[[1]]
modelFit <- arima(data, order = c(1, 1, 0),
seasonal = list(order = c(2, 1, 0), period = NA))
modelFit <- arima(data, order = c(1, 0, 0),
seasonal = list(order = c(2, 1, 0), period = NA),
method= "ML")
modelFit
fit <- predict(modelFit, n.ahead = 17)
fit
?predict
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(tidyr)
library(data.table)
library(RcolorBrewer)
library(RcolorBrewer)
library(doParallel)
library(scales)
#Load data: deforestation in Myanmar as determined by Hansen 2016
#Deforestation is given in Landsat pixels (30m x 30m)
Myanmar_table = read.csv("towndeforestation_total.csv")
getwd()
